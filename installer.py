import time, sys, os, shutil, json
from PyQt5 import QtWidgets
from PyQt5.QtCore import *
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *
from pathlib import Path


class InstallerApp(QMainWindow):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.__buildUi()
        self.install_edit.setText(str(Path('C:/Program Files/Sibyl')))
        self.default_edit.setText(str(Path(os.path.expanduser('~/Documents/Sibyl'))))
        self.__initTriggers()


    #! --- HELPER FUNCTIONS -----------------------------------------------------------------------
    #! --------------------------------------------------------------------------------------------

    def __initTriggers(self):
        self.install_button.clicked.connect(self.__installBrowse)
        self.default_button.clicked.connect(self.__defaultBrowse)
        self.buttonBox.accepted.connect(self.__install)
        self.buttonBox.rejected.connect(self.close)

    def __fileBrowser(self, which):
        directory = QFileDialog.getExistingDirectory(
            self,
            f'{which} Directory',
            ''
        )
        directory = Path(directory)
        if directory.name != 'Sibyl':
            directory = directory / 'Sibyl'
        return directory


    #! --- TRIGGER FUNCTIONS ----------------------------------------------------------------------
    #! --------------------------------------------------------------------------------------------

    def __installBrowse(self):
        install_path = self.__fileBrowser('Install')
        self.install_edit.setText(str(install_path))

    def __defaultBrowse(self):
        default_path = self.__fileBrowser('Default Saves')
        self.default_edit.setText(str(default_path))

    def __install(self):
        if getattr(sys, 'frozen', False):
            installer_root = Path(sys.executable).parent
        else:
            installer_root = Path(__file__).parent
        program_files_dir = installer_root / 'program_files'

        install_path = Path(self.install_edit.text())
        if not install_path.exists():
            os.mkdir(str(install_path))
        default_path = Path(self.default_edit.text())
        if not default_path.exists():
            os.mkdir(str(default_path))
        backup_path = install_path / 'backup'
        if backup_path.exists():
            shutil.rmtree(str(backup_path))

        ignore = [
            'Installer.exe',
            'program_files',
            'installer-debugger.bat',
            'sibyl-debugger.bat',
            'settings.json'
        ]
        move_items = [l for l in install_path.iterdir() if l.name not in ignore]
        if move_items != []:
            os.mkdir(str(backup_path))
        for item in move_items:
            shutil.move(str(item), str(backup_path / item.name))
        for item in program_files_dir.iterdir():
            shutil.move(str(item), str(install_path / item.name))

        settings_filename = 'settings.json'
        settings_path = install_path / settings_filename
        settings = {}
        if settings_path.exists():
            shutil.copy(str(settings_path))
            with open(str(settings_path), 'r') as f:
                settings = json.load(f)
            settings['saves_dir'] = str(default_path)
        else:
            settings = {
                'saves_dir': str(default_path)
            }
        with open(str(settings_path), 'w') as f:
            f.write(json.dumps(settings, indent=4))

        self.close()


    #! --- GENERATED BY QT DESIGNER (AND THEN MODIFIED BY ME) -------------------------------------
    #! --------------------------------------------------------------------------------------------

    def __buildUi(self):
        if not self.objectName():
            self.setObjectName('self')

        self.resize(445, 135)
        sizePolicy = QSizePolicy(QSizePolicy.Minimum, QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.sizePolicy().hasHeightForWidth())
        self.setSizePolicy(sizePolicy)
        self.setMinimumSize(QSize(445, 135))
        self.setMaximumSize(QSize(445, 135))

        if getattr(sys, 'frozen', False):
            icon_path = Path(sys.executable).parent / 'program_files' / 'icons' / 'settings.png'
            if not icon_path.exists():
                icon_path = Path(sys.executable).parent / 'icons' / 'settings.png'
        else:
            icon_path = Path(__file__).parent / 'icons' / 'settings.png'
        self.setWindowIcon(QIcon(str(icon_path)))

        self.centralwidget = QWidget(self)
        self.centralwidget.setObjectName('centralwidget')
        self.verticalLayout = QVBoxLayout(self.centralwidget)
        self.verticalLayout.setObjectName('verticalLayout')
        self.frame = QFrame(self.centralwidget)
        self.frame.setObjectName('frame')
        self.frame.setFrameShape(QFrame.StyledPanel)
        self.frame.setFrameShadow(QFrame.Raised)
        self.formLayout = QFormLayout(self.frame)
        self.formLayout.setObjectName('formLayout')
        self.formLayout.setHorizontalSpacing(5)
        self.formLayout.setVerticalSpacing(5)
        self.formLayout.setContentsMargins(0, 0, 0, 0)
        self.install_edit = QLineEdit(self.frame)
        self.install_edit.setObjectName('install_edit')
        self.install_edit.setMinimumSize(QSize(400, 0))
        self.formLayout.setWidget(2, QFormLayout.LabelRole, self.install_edit)
        self.install_button = QPushButton(self.frame)
        self.install_button.setObjectName('install_button')
        self.install_button.setMaximumSize(QSize(22, 22))
        self.formLayout.setWidget(2, QFormLayout.FieldRole, self.install_button)
        self.default_edit = QLineEdit(self.frame)
        self.default_edit.setObjectName('default_edit')
        self.default_edit.setMinimumSize(QSize(400, 0))
        self.formLayout.setWidget(4, QFormLayout.LabelRole, self.default_edit)
        self.default_button = QPushButton(self.frame)
        self.default_button.setObjectName('default_button')
        self.default_button.setMaximumSize(QSize(22, 22))
        self.formLayout.setWidget(4, QFormLayout.FieldRole, self.default_button)
        self.label_2 = QLabel(self.frame)
        self.label_2.setObjectName('label_2')
        self.formLayout.setWidget(1, QFormLayout.LabelRole, self.label_2)
        self.label_3 = QLabel(self.frame)
        self.label_3.setObjectName('label_3')
        self.formLayout.setWidget(3, QFormLayout.LabelRole, self.label_3)
        self.verticalLayout.addWidget(self.frame)
        self.buttonBox = QDialogButtonBox(self.centralwidget)
        self.buttonBox.setObjectName('buttonBox')
        sizePolicy.setHeightForWidth(self.buttonBox.sizePolicy().hasHeightForWidth())
        self.buttonBox.setSizePolicy(sizePolicy)
        self.buttonBox.setStandardButtons(QDialogButtonBox.Cancel|QDialogButtonBox.Ok)
        self.buttonBox.button(QDialogButtonBox.Ok).setText('Install')
        self.verticalLayout.addWidget(self.buttonBox)
        self.setCentralWidget(self.centralwidget)

        self.__retranslateUi()
        QMetaObject.connectSlotsByName(self)

    def __retranslateUi(self):
        self.setWindowTitle(QCoreApplication.translate('self', 'Sibyl Installer', None))
        self.install_button.setText(QCoreApplication.translate('self', '...', None))
        self.default_button.setText(QCoreApplication.translate('self', '...', None))
        self.label_2.setText(QCoreApplication.translate('self', 'Install Location:', None))
        self.label_3.setText(QCoreApplication.translate('self', 'Default Saves Location:', None))


def main():
    app = QtWidgets.QApplication([])
    win = InstallerApp()
    win.show()
    sys.exit(app.exec_())

if __name__ == '__main__':
    time.sleep(1)
    main()
